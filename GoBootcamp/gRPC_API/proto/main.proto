syntax = "proto3";

import "validate/validate.proto";
import "students.proto";

package main;

option go_package = "/proto/gen;grpcapipb";

service TeachersService {
    rpc GetTeachers (GetTeachersRequest) returns (Teachers);
    rpc AddTeachers (Teachers) returns (Teachers);
    rpc UpdateTeachers (Teachers) returns (Teachers);
    rpc DeleteTeachers (TeacherIds) returns (DeleteTeachersConfirmation);
    rpc GetStudentsByClassTeacher (TeacherId) returns (Students);
    rpc GetStudentCountByClassTeacher (TeacherId) returns (StudentCount);
}

message StudentCount {
    bool status = 1;
    int32 student_count = 2;
}

message DeleteTeachersConfirmation {
    string status = 1;
    repeated string deleted_ids = 2;
}

message TeacherId {
    string id = 1 [(validate.rules).string = {min_len: 24, max_len: 24, pattern: "^[a-fA-F0-9]{24}$"}];
}

message TeacherIds {
    repeated TeacherId ids = 1 [(validate.rules).repeated = {min_items: 1}];
}

message GetTeachersRequest {
    Teacher teacher = 1;
    repeated SortField sort_by = 2;
}

message Teacher {
    string id = 1;

    // first_name must not contain special characters but can contain spaces
    string first_name = 2 [(validate.rules).string = {
        pattern: "^[A-Za-z ]*$"
    }];
    
    // last_name must not contain special characters but can contain spaces
    string last_name = 3 [(validate.rules).string = {
        pattern: "^[A-Za-z ]*$"
    }];
    
    // email must be a valid email address
    // string email = 4;
    string email = 4 [(validate.rules).string = {
        email: true
    }];

    // class must not contain special characters but can contain spaces
    string class = 5 [(validate.rules).string = {
        pattern: "^[A-Za-z0-9 ]*$"
    }];
    
    // subject must not contain special characters but can contain spaces
    string subject = 6 [(validate.rules).string = {
        pattern: "^[A-Za-z0-9 ]*$"
    }];
}

message Teachers {
    repeated Teacher teachers = 1;
}