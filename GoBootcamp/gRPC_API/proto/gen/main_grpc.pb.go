// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: main.proto

package grpcapipb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TeachersService_GetTeachers_FullMethodName                   = "/main.TeachersService/GetTeachers"
	TeachersService_AddTeachers_FullMethodName                   = "/main.TeachersService/AddTeachers"
	TeachersService_UpdateTeachers_FullMethodName                = "/main.TeachersService/UpdateTeachers"
	TeachersService_DeleteTeachers_FullMethodName                = "/main.TeachersService/DeleteTeachers"
	TeachersService_GetStudentsByClassTeacher_FullMethodName     = "/main.TeachersService/GetStudentsByClassTeacher"
	TeachersService_GetStudentCountByClassTeacher_FullMethodName = "/main.TeachersService/GetStudentCountByClassTeacher"
)

// TeachersServiceClient is the client API for TeachersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TeachersServiceClient interface {
	GetTeachers(ctx context.Context, in *GetTeachersRequest, opts ...grpc.CallOption) (*Teachers, error)
	AddTeachers(ctx context.Context, in *Teachers, opts ...grpc.CallOption) (*Teachers, error)
	UpdateTeachers(ctx context.Context, in *Teachers, opts ...grpc.CallOption) (*Teachers, error)
	DeleteTeachers(ctx context.Context, in *TeacherIds, opts ...grpc.CallOption) (*DeleteTeachersConfirmation, error)
	GetStudentsByClassTeacher(ctx context.Context, in *TeacherId, opts ...grpc.CallOption) (*Students, error)
	GetStudentCountByClassTeacher(ctx context.Context, in *TeacherId, opts ...grpc.CallOption) (*StudentCount, error)
}

type teachersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTeachersServiceClient(cc grpc.ClientConnInterface) TeachersServiceClient {
	return &teachersServiceClient{cc}
}

func (c *teachersServiceClient) GetTeachers(ctx context.Context, in *GetTeachersRequest, opts ...grpc.CallOption) (*Teachers, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Teachers)
	err := c.cc.Invoke(ctx, TeachersService_GetTeachers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teachersServiceClient) AddTeachers(ctx context.Context, in *Teachers, opts ...grpc.CallOption) (*Teachers, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Teachers)
	err := c.cc.Invoke(ctx, TeachersService_AddTeachers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teachersServiceClient) UpdateTeachers(ctx context.Context, in *Teachers, opts ...grpc.CallOption) (*Teachers, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Teachers)
	err := c.cc.Invoke(ctx, TeachersService_UpdateTeachers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teachersServiceClient) DeleteTeachers(ctx context.Context, in *TeacherIds, opts ...grpc.CallOption) (*DeleteTeachersConfirmation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTeachersConfirmation)
	err := c.cc.Invoke(ctx, TeachersService_DeleteTeachers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teachersServiceClient) GetStudentsByClassTeacher(ctx context.Context, in *TeacherId, opts ...grpc.CallOption) (*Students, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Students)
	err := c.cc.Invoke(ctx, TeachersService_GetStudentsByClassTeacher_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teachersServiceClient) GetStudentCountByClassTeacher(ctx context.Context, in *TeacherId, opts ...grpc.CallOption) (*StudentCount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StudentCount)
	err := c.cc.Invoke(ctx, TeachersService_GetStudentCountByClassTeacher_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TeachersServiceServer is the server API for TeachersService service.
// All implementations must embed UnimplementedTeachersServiceServer
// for forward compatibility.
type TeachersServiceServer interface {
	GetTeachers(context.Context, *GetTeachersRequest) (*Teachers, error)
	AddTeachers(context.Context, *Teachers) (*Teachers, error)
	UpdateTeachers(context.Context, *Teachers) (*Teachers, error)
	DeleteTeachers(context.Context, *TeacherIds) (*DeleteTeachersConfirmation, error)
	GetStudentsByClassTeacher(context.Context, *TeacherId) (*Students, error)
	GetStudentCountByClassTeacher(context.Context, *TeacherId) (*StudentCount, error)
	mustEmbedUnimplementedTeachersServiceServer()
}

// UnimplementedTeachersServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTeachersServiceServer struct{}

func (UnimplementedTeachersServiceServer) GetTeachers(context.Context, *GetTeachersRequest) (*Teachers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeachers not implemented")
}
func (UnimplementedTeachersServiceServer) AddTeachers(context.Context, *Teachers) (*Teachers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTeachers not implemented")
}
func (UnimplementedTeachersServiceServer) UpdateTeachers(context.Context, *Teachers) (*Teachers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTeachers not implemented")
}
func (UnimplementedTeachersServiceServer) DeleteTeachers(context.Context, *TeacherIds) (*DeleteTeachersConfirmation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTeachers not implemented")
}
func (UnimplementedTeachersServiceServer) GetStudentsByClassTeacher(context.Context, *TeacherId) (*Students, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentsByClassTeacher not implemented")
}
func (UnimplementedTeachersServiceServer) GetStudentCountByClassTeacher(context.Context, *TeacherId) (*StudentCount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentCountByClassTeacher not implemented")
}
func (UnimplementedTeachersServiceServer) mustEmbedUnimplementedTeachersServiceServer() {}
func (UnimplementedTeachersServiceServer) testEmbeddedByValue()                         {}

// UnsafeTeachersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TeachersServiceServer will
// result in compilation errors.
type UnsafeTeachersServiceServer interface {
	mustEmbedUnimplementedTeachersServiceServer()
}

func RegisterTeachersServiceServer(s grpc.ServiceRegistrar, srv TeachersServiceServer) {
	// If the following call pancis, it indicates UnimplementedTeachersServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TeachersService_ServiceDesc, srv)
}

func _TeachersService_GetTeachers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeachersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeachersServiceServer).GetTeachers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeachersService_GetTeachers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeachersServiceServer).GetTeachers(ctx, req.(*GetTeachersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeachersService_AddTeachers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Teachers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeachersServiceServer).AddTeachers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeachersService_AddTeachers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeachersServiceServer).AddTeachers(ctx, req.(*Teachers))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeachersService_UpdateTeachers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Teachers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeachersServiceServer).UpdateTeachers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeachersService_UpdateTeachers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeachersServiceServer).UpdateTeachers(ctx, req.(*Teachers))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeachersService_DeleteTeachers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeacherIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeachersServiceServer).DeleteTeachers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeachersService_DeleteTeachers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeachersServiceServer).DeleteTeachers(ctx, req.(*TeacherIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeachersService_GetStudentsByClassTeacher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeacherId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeachersServiceServer).GetStudentsByClassTeacher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeachersService_GetStudentsByClassTeacher_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeachersServiceServer).GetStudentsByClassTeacher(ctx, req.(*TeacherId))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeachersService_GetStudentCountByClassTeacher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeacherId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeachersServiceServer).GetStudentCountByClassTeacher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeachersService_GetStudentCountByClassTeacher_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeachersServiceServer).GetStudentCountByClassTeacher(ctx, req.(*TeacherId))
	}
	return interceptor(ctx, in, info, handler)
}

// TeachersService_ServiceDesc is the grpc.ServiceDesc for TeachersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TeachersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.TeachersService",
	HandlerType: (*TeachersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTeachers",
			Handler:    _TeachersService_GetTeachers_Handler,
		},
		{
			MethodName: "AddTeachers",
			Handler:    _TeachersService_AddTeachers_Handler,
		},
		{
			MethodName: "UpdateTeachers",
			Handler:    _TeachersService_UpdateTeachers_Handler,
		},
		{
			MethodName: "DeleteTeachers",
			Handler:    _TeachersService_DeleteTeachers_Handler,
		},
		{
			MethodName: "GetStudentsByClassTeacher",
			Handler:    _TeachersService_GetStudentsByClassTeacher_Handler,
		},
		{
			MethodName: "GetStudentCountByClassTeacher",
			Handler:    _TeachersService_GetStudentCountByClassTeacher_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "main.proto",
}
