// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: students.proto

package grpcapipb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StudentsService_GetStudents_FullMethodName    = "/main.StudentsService/GetStudents"
	StudentsService_AddStudents_FullMethodName    = "/main.StudentsService/AddStudents"
	StudentsService_UpdateStudents_FullMethodName = "/main.StudentsService/UpdateStudents"
	StudentsService_DeleteStudents_FullMethodName = "/main.StudentsService/DeleteStudents"
)

// StudentsServiceClient is the client API for StudentsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StudentsServiceClient interface {
	GetStudents(ctx context.Context, in *GetStudentsRequest, opts ...grpc.CallOption) (*Students, error)
	AddStudents(ctx context.Context, in *Students, opts ...grpc.CallOption) (*Students, error)
	UpdateStudents(ctx context.Context, in *Students, opts ...grpc.CallOption) (*Students, error)
	DeleteStudents(ctx context.Context, in *StudentIds, opts ...grpc.CallOption) (*DeleteStudentsConfirmation, error)
}

type studentsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStudentsServiceClient(cc grpc.ClientConnInterface) StudentsServiceClient {
	return &studentsServiceClient{cc}
}

func (c *studentsServiceClient) GetStudents(ctx context.Context, in *GetStudentsRequest, opts ...grpc.CallOption) (*Students, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Students)
	err := c.cc.Invoke(ctx, StudentsService_GetStudents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentsServiceClient) AddStudents(ctx context.Context, in *Students, opts ...grpc.CallOption) (*Students, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Students)
	err := c.cc.Invoke(ctx, StudentsService_AddStudents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentsServiceClient) UpdateStudents(ctx context.Context, in *Students, opts ...grpc.CallOption) (*Students, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Students)
	err := c.cc.Invoke(ctx, StudentsService_UpdateStudents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentsServiceClient) DeleteStudents(ctx context.Context, in *StudentIds, opts ...grpc.CallOption) (*DeleteStudentsConfirmation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteStudentsConfirmation)
	err := c.cc.Invoke(ctx, StudentsService_DeleteStudents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StudentsServiceServer is the server API for StudentsService service.
// All implementations must embed UnimplementedStudentsServiceServer
// for forward compatibility.
type StudentsServiceServer interface {
	GetStudents(context.Context, *GetStudentsRequest) (*Students, error)
	AddStudents(context.Context, *Students) (*Students, error)
	UpdateStudents(context.Context, *Students) (*Students, error)
	DeleteStudents(context.Context, *StudentIds) (*DeleteStudentsConfirmation, error)
	mustEmbedUnimplementedStudentsServiceServer()
}

// UnimplementedStudentsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStudentsServiceServer struct{}

func (UnimplementedStudentsServiceServer) GetStudents(context.Context, *GetStudentsRequest) (*Students, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudents not implemented")
}
func (UnimplementedStudentsServiceServer) AddStudents(context.Context, *Students) (*Students, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStudents not implemented")
}
func (UnimplementedStudentsServiceServer) UpdateStudents(context.Context, *Students) (*Students, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStudents not implemented")
}
func (UnimplementedStudentsServiceServer) DeleteStudents(context.Context, *StudentIds) (*DeleteStudentsConfirmation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStudents not implemented")
}
func (UnimplementedStudentsServiceServer) mustEmbedUnimplementedStudentsServiceServer() {}
func (UnimplementedStudentsServiceServer) testEmbeddedByValue()                         {}

// UnsafeStudentsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StudentsServiceServer will
// result in compilation errors.
type UnsafeStudentsServiceServer interface {
	mustEmbedUnimplementedStudentsServiceServer()
}

func RegisterStudentsServiceServer(s grpc.ServiceRegistrar, srv StudentsServiceServer) {
	// If the following call pancis, it indicates UnimplementedStudentsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StudentsService_ServiceDesc, srv)
}

func _StudentsService_GetStudents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStudentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentsServiceServer).GetStudents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudentsService_GetStudents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentsServiceServer).GetStudents(ctx, req.(*GetStudentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentsService_AddStudents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Students)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentsServiceServer).AddStudents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudentsService_AddStudents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentsServiceServer).AddStudents(ctx, req.(*Students))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentsService_UpdateStudents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Students)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentsServiceServer).UpdateStudents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudentsService_UpdateStudents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentsServiceServer).UpdateStudents(ctx, req.(*Students))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentsService_DeleteStudents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudentIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentsServiceServer).DeleteStudents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudentsService_DeleteStudents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentsServiceServer).DeleteStudents(ctx, req.(*StudentIds))
	}
	return interceptor(ctx, in, info, handler)
}

// StudentsService_ServiceDesc is the grpc.ServiceDesc for StudentsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StudentsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.StudentsService",
	HandlerType: (*StudentsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStudents",
			Handler:    _StudentsService_GetStudents_Handler,
		},
		{
			MethodName: "AddStudents",
			Handler:    _StudentsService_AddStudents_Handler,
		},
		{
			MethodName: "UpdateStudents",
			Handler:    _StudentsService_UpdateStudents_Handler,
		},
		{
			MethodName: "DeleteStudents",
			Handler:    _StudentsService_DeleteStudents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "students.proto",
}
