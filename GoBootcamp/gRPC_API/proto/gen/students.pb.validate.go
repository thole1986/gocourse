// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: students.proto

package grpcapipb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on DeleteStudentsConfirmation with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteStudentsConfirmation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteStudentsConfirmation with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteStudentsConfirmationMultiError, or nil if none found.
func (m *DeleteStudentsConfirmation) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteStudentsConfirmation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return DeleteStudentsConfirmationMultiError(errors)
	}

	return nil
}

// DeleteStudentsConfirmationMultiError is an error wrapping multiple
// validation errors returned by DeleteStudentsConfirmation.ValidateAll() if
// the designated constraints aren't met.
type DeleteStudentsConfirmationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteStudentsConfirmationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteStudentsConfirmationMultiError) AllErrors() []error { return m }

// DeleteStudentsConfirmationValidationError is the validation error returned
// by DeleteStudentsConfirmation.Validate if the designated constraints aren't met.
type DeleteStudentsConfirmationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteStudentsConfirmationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteStudentsConfirmationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteStudentsConfirmationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteStudentsConfirmationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteStudentsConfirmationValidationError) ErrorName() string {
	return "DeleteStudentsConfirmationValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteStudentsConfirmationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteStudentsConfirmation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteStudentsConfirmationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteStudentsConfirmationValidationError{}

// Validate checks the field values on StudentIds with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StudentIds) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StudentIds with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StudentIdsMultiError, or
// nil if none found.
func (m *StudentIds) ValidateAll() error {
	return m.validate(true)
}

func (m *StudentIds) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StudentIdsMultiError(errors)
	}

	return nil
}

// StudentIdsMultiError is an error wrapping multiple validation errors
// returned by StudentIds.ValidateAll() if the designated constraints aren't met.
type StudentIdsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StudentIdsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StudentIdsMultiError) AllErrors() []error { return m }

// StudentIdsValidationError is the validation error returned by
// StudentIds.Validate if the designated constraints aren't met.
type StudentIdsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StudentIdsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StudentIdsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StudentIdsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StudentIdsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StudentIdsValidationError) ErrorName() string { return "StudentIdsValidationError" }

// Error satisfies the builtin error interface
func (e StudentIdsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStudentIds.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StudentIdsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StudentIdsValidationError{}

// Validate checks the field values on GetStudentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStudentsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStudentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStudentsRequestMultiError, or nil if none found.
func (m *GetStudentsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStudentsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStudent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetStudentsRequestValidationError{
					field:  "Student",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetStudentsRequestValidationError{
					field:  "Student",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStudent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetStudentsRequestValidationError{
				field:  "Student",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetSortBy() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetStudentsRequestValidationError{
						field:  fmt.Sprintf("SortBy[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetStudentsRequestValidationError{
						field:  fmt.Sprintf("SortBy[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetStudentsRequestValidationError{
					field:  fmt.Sprintf("SortBy[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageNumber

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetStudentsRequestMultiError(errors)
	}

	return nil
}

// GetStudentsRequestMultiError is an error wrapping multiple validation errors
// returned by GetStudentsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetStudentsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStudentsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStudentsRequestMultiError) AllErrors() []error { return m }

// GetStudentsRequestValidationError is the validation error returned by
// GetStudentsRequest.Validate if the designated constraints aren't met.
type GetStudentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStudentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStudentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStudentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStudentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStudentsRequestValidationError) ErrorName() string {
	return "GetStudentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetStudentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStudentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStudentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStudentsRequestValidationError{}

// Validate checks the field values on SortField with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SortField) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SortField with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SortFieldMultiError, or nil
// if none found.
func (m *SortField) ValidateAll() error {
	return m.validate(true)
}

func (m *SortField) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Field

	// no validation rules for Order

	if len(errors) > 0 {
		return SortFieldMultiError(errors)
	}

	return nil
}

// SortFieldMultiError is an error wrapping multiple validation errors returned
// by SortField.ValidateAll() if the designated constraints aren't met.
type SortFieldMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SortFieldMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SortFieldMultiError) AllErrors() []error { return m }

// SortFieldValidationError is the validation error returned by
// SortField.Validate if the designated constraints aren't met.
type SortFieldValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SortFieldValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SortFieldValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SortFieldValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SortFieldValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SortFieldValidationError) ErrorName() string { return "SortFieldValidationError" }

// Error satisfies the builtin error interface
func (e SortFieldValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSortField.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SortFieldValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SortFieldValidationError{}

// Validate checks the field values on Student with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Student) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Student with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in StudentMultiError, or nil if none found.
func (m *Student) ValidateAll() error {
	return m.validate(true)
}

func (m *Student) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for FirstName

	// no validation rules for LastName

	// no validation rules for Email

	// no validation rules for Class

	if len(errors) > 0 {
		return StudentMultiError(errors)
	}

	return nil
}

// StudentMultiError is an error wrapping multiple validation errors returned
// by Student.ValidateAll() if the designated constraints aren't met.
type StudentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StudentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StudentMultiError) AllErrors() []error { return m }

// StudentValidationError is the validation error returned by Student.Validate
// if the designated constraints aren't met.
type StudentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StudentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StudentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StudentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StudentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StudentValidationError) ErrorName() string { return "StudentValidationError" }

// Error satisfies the builtin error interface
func (e StudentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStudent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StudentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StudentValidationError{}

// Validate checks the field values on Students with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Students) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Students with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StudentsMultiError, or nil
// if none found.
func (m *Students) ValidateAll() error {
	return m.validate(true)
}

func (m *Students) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetStudents() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StudentsValidationError{
						field:  fmt.Sprintf("Students[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StudentsValidationError{
						field:  fmt.Sprintf("Students[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StudentsValidationError{
					field:  fmt.Sprintf("Students[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return StudentsMultiError(errors)
	}

	return nil
}

// StudentsMultiError is an error wrapping multiple validation errors returned
// by Students.ValidateAll() if the designated constraints aren't met.
type StudentsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StudentsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StudentsMultiError) AllErrors() []error { return m }

// StudentsValidationError is the validation error returned by
// Students.Validate if the designated constraints aren't met.
type StudentsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StudentsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StudentsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StudentsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StudentsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StudentsValidationError) ErrorName() string { return "StudentsValidationError" }

// Error satisfies the builtin error interface
func (e StudentsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStudents.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StudentsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StudentsValidationError{}
