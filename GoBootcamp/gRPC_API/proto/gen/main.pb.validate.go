// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: main.proto

package grpcapipb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on StudentCount with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StudentCount) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StudentCount with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StudentCountMultiError, or
// nil if none found.
func (m *StudentCount) ValidateAll() error {
	return m.validate(true)
}

func (m *StudentCount) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for StudentCount

	if len(errors) > 0 {
		return StudentCountMultiError(errors)
	}

	return nil
}

// StudentCountMultiError is an error wrapping multiple validation errors
// returned by StudentCount.ValidateAll() if the designated constraints aren't met.
type StudentCountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StudentCountMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StudentCountMultiError) AllErrors() []error { return m }

// StudentCountValidationError is the validation error returned by
// StudentCount.Validate if the designated constraints aren't met.
type StudentCountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StudentCountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StudentCountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StudentCountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StudentCountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StudentCountValidationError) ErrorName() string { return "StudentCountValidationError" }

// Error satisfies the builtin error interface
func (e StudentCountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStudentCount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StudentCountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StudentCountValidationError{}

// Validate checks the field values on DeleteTeachersConfirmation with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTeachersConfirmation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTeachersConfirmation with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTeachersConfirmationMultiError, or nil if none found.
func (m *DeleteTeachersConfirmation) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTeachersConfirmation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return DeleteTeachersConfirmationMultiError(errors)
	}

	return nil
}

// DeleteTeachersConfirmationMultiError is an error wrapping multiple
// validation errors returned by DeleteTeachersConfirmation.ValidateAll() if
// the designated constraints aren't met.
type DeleteTeachersConfirmationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTeachersConfirmationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTeachersConfirmationMultiError) AllErrors() []error { return m }

// DeleteTeachersConfirmationValidationError is the validation error returned
// by DeleteTeachersConfirmation.Validate if the designated constraints aren't met.
type DeleteTeachersConfirmationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTeachersConfirmationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTeachersConfirmationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTeachersConfirmationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTeachersConfirmationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTeachersConfirmationValidationError) ErrorName() string {
	return "DeleteTeachersConfirmationValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTeachersConfirmationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTeachersConfirmation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTeachersConfirmationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTeachersConfirmationValidationError{}

// Validate checks the field values on TeacherId with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TeacherId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TeacherId with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TeacherIdMultiError, or nil
// if none found.
func (m *TeacherId) ValidateAll() error {
	return m.validate(true)
}

func (m *TeacherId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) != 24 {
		err := TeacherIdValidationError{
			field:  "Id",
			reason: "value length must be 24 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if !_TeacherId_Id_Pattern.MatchString(m.GetId()) {
		err := TeacherIdValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[a-fA-F0-9]{24}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return TeacherIdMultiError(errors)
	}

	return nil
}

// TeacherIdMultiError is an error wrapping multiple validation errors returned
// by TeacherId.ValidateAll() if the designated constraints aren't met.
type TeacherIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TeacherIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TeacherIdMultiError) AllErrors() []error { return m }

// TeacherIdValidationError is the validation error returned by
// TeacherId.Validate if the designated constraints aren't met.
type TeacherIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TeacherIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TeacherIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TeacherIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TeacherIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TeacherIdValidationError) ErrorName() string { return "TeacherIdValidationError" }

// Error satisfies the builtin error interface
func (e TeacherIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTeacherId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TeacherIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TeacherIdValidationError{}

var _TeacherId_Id_Pattern = regexp.MustCompile("^[a-fA-F0-9]{24}$")

// Validate checks the field values on TeacherIds with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TeacherIds) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TeacherIds with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TeacherIdsMultiError, or
// nil if none found.
func (m *TeacherIds) ValidateAll() error {
	return m.validate(true)
}

func (m *TeacherIds) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetIds()) < 1 {
		err := TeacherIdsValidationError{
			field:  "Ids",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetIds() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TeacherIdsValidationError{
						field:  fmt.Sprintf("Ids[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TeacherIdsValidationError{
						field:  fmt.Sprintf("Ids[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TeacherIdsValidationError{
					field:  fmt.Sprintf("Ids[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TeacherIdsMultiError(errors)
	}

	return nil
}

// TeacherIdsMultiError is an error wrapping multiple validation errors
// returned by TeacherIds.ValidateAll() if the designated constraints aren't met.
type TeacherIdsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TeacherIdsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TeacherIdsMultiError) AllErrors() []error { return m }

// TeacherIdsValidationError is the validation error returned by
// TeacherIds.Validate if the designated constraints aren't met.
type TeacherIdsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TeacherIdsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TeacherIdsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TeacherIdsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TeacherIdsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TeacherIdsValidationError) ErrorName() string { return "TeacherIdsValidationError" }

// Error satisfies the builtin error interface
func (e TeacherIdsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTeacherIds.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TeacherIdsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TeacherIdsValidationError{}

// Validate checks the field values on GetTeachersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTeachersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTeachersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTeachersRequestMultiError, or nil if none found.
func (m *GetTeachersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTeachersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTeacher()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTeachersRequestValidationError{
					field:  "Teacher",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTeachersRequestValidationError{
					field:  "Teacher",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTeacher()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTeachersRequestValidationError{
				field:  "Teacher",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetSortBy() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTeachersRequestValidationError{
						field:  fmt.Sprintf("SortBy[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTeachersRequestValidationError{
						field:  fmt.Sprintf("SortBy[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTeachersRequestValidationError{
					field:  fmt.Sprintf("SortBy[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetTeachersRequestMultiError(errors)
	}

	return nil
}

// GetTeachersRequestMultiError is an error wrapping multiple validation errors
// returned by GetTeachersRequest.ValidateAll() if the designated constraints
// aren't met.
type GetTeachersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTeachersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTeachersRequestMultiError) AllErrors() []error { return m }

// GetTeachersRequestValidationError is the validation error returned by
// GetTeachersRequest.Validate if the designated constraints aren't met.
type GetTeachersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTeachersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTeachersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTeachersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTeachersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTeachersRequestValidationError) ErrorName() string {
	return "GetTeachersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTeachersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTeachersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTeachersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTeachersRequestValidationError{}

// Validate checks the field values on Teacher with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Teacher) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Teacher with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TeacherMultiError, or nil if none found.
func (m *Teacher) ValidateAll() error {
	return m.validate(true)
}

func (m *Teacher) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if !_Teacher_FirstName_Pattern.MatchString(m.GetFirstName()) {
		err := TeacherValidationError{
			field:  "FirstName",
			reason: "value does not match regex pattern \"^[A-Za-z ]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_Teacher_LastName_Pattern.MatchString(m.GetLastName()) {
		err := TeacherValidationError{
			field:  "LastName",
			reason: "value does not match regex pattern \"^[A-Za-z ]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = TeacherValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_Teacher_Class_Pattern.MatchString(m.GetClass()) {
		err := TeacherValidationError{
			field:  "Class",
			reason: "value does not match regex pattern \"^[A-Za-z0-9 ]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_Teacher_Subject_Pattern.MatchString(m.GetSubject()) {
		err := TeacherValidationError{
			field:  "Subject",
			reason: "value does not match regex pattern \"^[A-Za-z0-9 ]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return TeacherMultiError(errors)
	}

	return nil
}

func (m *Teacher) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *Teacher) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// TeacherMultiError is an error wrapping multiple validation errors returned
// by Teacher.ValidateAll() if the designated constraints aren't met.
type TeacherMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TeacherMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TeacherMultiError) AllErrors() []error { return m }

// TeacherValidationError is the validation error returned by Teacher.Validate
// if the designated constraints aren't met.
type TeacherValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TeacherValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TeacherValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TeacherValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TeacherValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TeacherValidationError) ErrorName() string { return "TeacherValidationError" }

// Error satisfies the builtin error interface
func (e TeacherValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTeacher.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TeacherValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TeacherValidationError{}

var _Teacher_FirstName_Pattern = regexp.MustCompile("^[A-Za-z ]*$")

var _Teacher_LastName_Pattern = regexp.MustCompile("^[A-Za-z ]*$")

var _Teacher_Class_Pattern = regexp.MustCompile("^[A-Za-z0-9 ]*$")

var _Teacher_Subject_Pattern = regexp.MustCompile("^[A-Za-z0-9 ]*$")

// Validate checks the field values on Teachers with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Teachers) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Teachers with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TeachersMultiError, or nil
// if none found.
func (m *Teachers) ValidateAll() error {
	return m.validate(true)
}

func (m *Teachers) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTeachers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TeachersValidationError{
						field:  fmt.Sprintf("Teachers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TeachersValidationError{
						field:  fmt.Sprintf("Teachers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TeachersValidationError{
					field:  fmt.Sprintf("Teachers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TeachersMultiError(errors)
	}

	return nil
}

// TeachersMultiError is an error wrapping multiple validation errors returned
// by Teachers.ValidateAll() if the designated constraints aren't met.
type TeachersMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TeachersMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TeachersMultiError) AllErrors() []error { return m }

// TeachersValidationError is the validation error returned by
// Teachers.Validate if the designated constraints aren't met.
type TeachersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TeachersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TeachersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TeachersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TeachersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TeachersValidationError) ErrorName() string { return "TeachersValidationError" }

// Error satisfies the builtin error interface
func (e TeachersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTeachers.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TeachersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TeachersValidationError{}
